// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli 检查到已有配置，可以选择不覆盖: 不覆盖后的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enable: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择覆盖: 覆盖后的配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enable: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enable: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
import {
  Method,
  RequestBodyType,
  ResponseBodyType,
  RequestConfig,
  RequestFunctionRestArgs,
  FileData,
  prepare,
} from 'yapi-to-typescript'

// @ts-ignore
import request from './request'

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
export interface DeleteMethodRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
export interface DeleteMethodResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
export function deleteMethod(requestData: DeleteMethodRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<DeleteMethodResponse>(prepare(deleteMethod.requestConfig, requestData), ...args)
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
deleteMethod.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/deleteMethod',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/deleteMethod', undefined, string>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
export interface GetMethodRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
export interface GetMethodResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
export function getMethod(requestData: GetMethodRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<GetMethodResponse>(prepare(getMethod.requestConfig, requestData), ...args)
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
getMethod.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/getMethod',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/getMethod', undefined, string>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
export interface Json5ResponseRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
export interface Json5ResponseResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
export function json5Response(requestData?: Json5ResponseRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<Json5ResponseResponse>(prepare(json5Response.requestConfig, requestData), ...args)
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
json5Response.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Response',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Response', undefined, string>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
export interface Json5RequestRequest {
  id: number
  name: string
  likes: {}[]
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
export interface Json5RequestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
export function json5Request(requestData: Json5RequestRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<Json5RequestResponse>(prepare(json5Request.requestConfig, requestData), ...args)
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
json5Request.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Request',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Request', undefined, string>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
export interface PostMethodRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
export interface PostMethodResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
export function postMethod(requestData: PostMethodRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<PostMethodResponse>(prepare(postMethod.requestConfig, requestData), ...args)
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
postMethod.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/postMethod',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/postMethod', undefined, string>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
export interface PutMethodRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
export interface PutMethodResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
export function putMethod(requestData: PutMethodRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<PutMethodResponse>(prepare(putMethod.requestConfig, requestData), ...args)
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
putMethod.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/putMethod',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/putMethod', undefined, string>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
export function dataKeyExample(requestData: DataKeyExampleRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<DataKeyExampleResponse>(prepare(dataKeyExample.requestConfig, requestData), ...args)
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
dataKeyExample.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/dataKeyExample',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/dataKeyExample', undefined, string>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
export interface NoResponseDataRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
export interface NoResponseDataResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
export function noResponseData(requestData?: NoResponseDataRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<NoResponseDataResponse>(prepare(noResponseData.requestConfig, requestData), ...args)
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
noResponseData.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/noResponseData',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/noResponseData', undefined, string>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
export interface EmptyResponseRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
export interface EmptyResponseResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
export function emptyResponse(requestData?: EmptyResponseRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<EmptyResponseResponse>(prepare(emptyResponse.requestConfig, requestData), ...args)
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
emptyResponse.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/emptyResponse',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/emptyResponse', undefined, string>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
export interface TestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
export interface TestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
export function test(requestData: TestRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<TestResponse>(prepare(test.requestConfig, requestData), ...args)
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
test.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/path/:id/hello/:name/:pass/{avatar}/:test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
} as Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/path/:id/hello/:name/:pass/{avatar}/:test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar'
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
export interface HihihiRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
export interface HihihiResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
export function hihihi(requestData: HihihiRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<HihihiResponse>(prepare(hihihi.requestConfig, requestData), ...args)
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
hihihi.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/test/{id}/:hihihi',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
} as Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/test/{id}/:hihihi', undefined, 'hihihi' | 'id'>
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
export interface RawResponseRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
export type RawResponseResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
export function rawResponse(requestData?: RawResponseRequest, ...args: RequestFunctionRestArgs<typeof request>) {
  return request<RawResponseResponse>(prepare(rawResponse.requestConfig, requestData), ...args)
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
rawResponse.requestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/rawResponse',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
} as Readonly<RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/rawResponse', undefined, string>>

/* prettier-ignore-end */
"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {},
): Promise<TResponseData> {
  return new Promise<any>((resolve, reject) => {
    // 请求地址
    const url = \`\${payload.prodUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enable: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;
